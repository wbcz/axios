"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
jest.mock("../src/progress-bar");
jest.mock("../src/changelog");
jest.mock("../src/github-api");
jest.mock("./git");
jest.mock("./fetch");
describe("Changelog", function () {
    describe("packageFromPath", function () {
        var MockedChangelog = require("./changelog").default;
        var TESTS = [
            ["", ""],
            ["foo.js", ""],
            ["packages/foo.js", ""],
            ["packages/foo/bar.js", "foo"],
            ["packages/foo/bar/baz.js", "foo"],
            ["packages/@foo/bar.js", "@foo"],
            ["packages/@foo/bar/baz.js", "@foo/bar"],
        ];
        var _loop_1 = function (input, expected) {
            it(input + " -> " + expected, function () {
                var changelog = new MockedChangelog();
                expect(changelog.packageFromPath(input)).toEqual(expected);
            });
        };
        for (var _i = 0, TESTS_1 = TESTS; _i < TESTS_1.length; _i++) {
            var _a = TESTS_1[_i], input = _a[0], expected = _a[1];
            _loop_1(input, expected);
        }
    });
    describe("getCommitInfos", function () {
        beforeEach(function () {
            require("./fetch").__resetMockResponses();
            require("./git").listCommits.mockImplementation(function () { return [
                {
                    sha: "a0000005",
                    refName: "HEAD -> master, tag: v0.2.0, origin/master, origin/HEAD",
                    summary: "chore(release): releasing component",
                    date: "2017-01-01",
                },
                {
                    sha: "a0000004",
                    refName: "",
                    summary: "Merge pull request #2 from my-feature",
                    date: "2017-01-01",
                },
                {
                    sha: "a0000003",
                    refName: "",
                    summary: "feat(module) Add new module (#2)",
                    date: "2017-01-01",
                },
                {
                    sha: "a0000002",
                    refName: "",
                    summary: "refactor(module) Simplify implementation",
                    date: "2017-01-01",
                },
                {
                    sha: "a0000001",
                    refName: "tag: v0.1.0",
                    summary: "chore(release): releasing component",
                    date: "2017-01-01",
                },
            ]; });
            require("./git").listTagNames.mockImplementation(function () { return ["v0.2.0", "v0.1.1", "v0.1.0", "v0.0.1"]; });
            require("./git").changedPaths.mockImplementation(function () { return []; });
            var usersCache = {
                "https://api.github.com/users/test-user": {
                    login: "test-user",
                    html_url: "https://github.com/test-user",
                    name: "Test User",
                },
            };
            var issuesCache = {
                "https://api.github.com/repos/lerna/lerna-changelog/issues/2": {
                    number: 2,
                    title: "This is the commit title for the issue (#2)",
                    labels: [{ name: "Type: New Feature" }, { name: "Status: In Progress" }],
                    user: usersCache["https://api.github.com/users/test-user"],
                },
            };
            require("./fetch").__setMockResponses(__assign({}, usersCache, issuesCache));
        });
        afterEach(function () {
            jest.resetAllMocks();
        });
        it("parse commits with different tags", function () { return __awaiter(_this, void 0, void 0, function () {
            var MockedChangelog, changelog, commitsInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        MockedChangelog = require("./changelog").default;
                        changelog = new MockedChangelog();
                        return [4, changelog.getCommitInfos()];
                    case 1:
                        commitsInfo = _a.sent();
                        expect(commitsInfo).toMatchSnapshot();
                        return [2];
                }
            });
        }); });
    });
    describe("getCommitters", function () {
        beforeEach(function () {
            require("./fetch").__resetMockResponses();
            var usersCache = {
                "https://api.github.com/users/test-user": {
                    login: "test-user",
                    html_url: "https://github.com/test-user",
                    name: "Test User",
                },
                "https://api.github.com/users/test-user-1": {
                    login: "test-user-1",
                    html_url: "https://github.com/test-user-1",
                    name: "Test User 1",
                },
                "https://api.github.com/users/test-user-2": {
                    login: "test-user-2",
                    html_url: "https://github.com/test-user-2",
                    name: "Test User 2",
                },
                "https://api.github.com/users/user-bot": {
                    login: "user-bot",
                    html_url: "https://github.com/user-bot",
                    name: "User Bot",
                },
            };
            require("./fetch").__setMockResponses(usersCache);
        });
        it("get list of valid commiters", function () { return __awaiter(_this, void 0, void 0, function () {
            var MockedChangelog, changelog, testCommits, committers;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        MockedChangelog = require("./changelog").default;
                        changelog = new MockedChangelog({
                            ignoreCommitters: ["user-bot"],
                        });
                        testCommits = [
                            {
                                commitSHA: "a0000004",
                                githubIssue: { user: { login: "test-user-1" } },
                            },
                            {
                                commitSHA: "a0000003",
                                githubIssue: { user: { login: "test-user-2" } },
                            },
                            { commitSHA: "a0000002", githubIssue: { user: { login: "user-bot" } } },
                            { commitSHA: "a0000001" },
                        ];
                        return [4, changelog.getCommitters(testCommits)];
                    case 1:
                        committers = _a.sent();
                        expect(committers).toEqual([
                            {
                                login: "test-user-1",
                                html_url: "https://github.com/test-user-1",
                                name: "Test User 1",
                            },
                            {
                                login: "test-user-2",
                                html_url: "https://github.com/test-user-2",
                                name: "Test User 2",
                            },
                        ]);
                        return [2];
                }
            });
        }); });
    });
});

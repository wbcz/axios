"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var UNRELEASED_TAG = "___unreleased___";
var COMMIT_FIX_REGEX = /(fix|close|resolve)(e?s|e?d)? [T#](\d+)/i;
var MarkdownRenderer = (function () {
    function MarkdownRenderer(options) {
        this.options = options;
    }
    MarkdownRenderer.prototype.renderMarkdown = function (releases) {
        var _this = this;
        return "\n" + releases
            .map(function (release) { return _this.renderRelease(release); })
            .filter(Boolean)
            .join("\n\n\n");
    };
    MarkdownRenderer.prototype.renderRelease = function (release) {
        var categories = this.groupByCategory(release.commits);
        var categoriesWithCommits = categories.filter(function (category) { return category.commits.length > 0; });
        if (categoriesWithCommits.length === 0)
            return "";
        var releaseTitle = release.name === UNRELEASED_TAG ? this.options.unreleasedName : release.name;
        var markdown = "## " + releaseTitle + " (" + release.date + ")";
        for (var _i = 0, categoriesWithCommits_1 = categoriesWithCommits; _i < categoriesWithCommits_1.length; _i++) {
            var category = categoriesWithCommits_1[_i];
            markdown += "\n\n#### " + category.name + "\n";
            if (this.hasPackages(category.commits)) {
                markdown += this.renderContributionsByPackage(category.commits);
            }
            else {
                markdown += this.renderContributionList(category.commits);
            }
        }
        if (release.contributors) {
            markdown += "\n\n" + this.renderContributorList(release.contributors);
        }
        return markdown;
    };
    MarkdownRenderer.prototype.renderContributionsByPackage = function (commits) {
        var _this = this;
        var commitsByPackage = {};
        for (var _i = 0, commits_1 = commits; _i < commits_1.length; _i++) {
            var commit = commits_1[_i];
            var changedPackages = commit.packages || [];
            var packageName = this.renderPackageNames(changedPackages);
            commitsByPackage[packageName] = commitsByPackage[packageName] || [];
            commitsByPackage[packageName].push(commit);
        }
        var packageNames = Object.keys(commitsByPackage);
        return packageNames
            .map(function (packageName) {
            var pkgCommits = commitsByPackage[packageName];
            return "* " + packageName + "\n" + _this.renderContributionList(pkgCommits, "  ");
        })
            .join("\n");
    };
    MarkdownRenderer.prototype.renderPackageNames = function (packageNames) {
        return packageNames.length > 0 ? packageNames.map(function (pkg) { return "`" + pkg + "`"; }).join(", ") : "Other";
    };
    MarkdownRenderer.prototype.renderContributionList = function (commits, prefix) {
        var _this = this;
        if (prefix === void 0) { prefix = ""; }
        return commits
            .map(function (commit) { return _this.renderContribution(commit); })
            .filter(Boolean)
            .map(function (rendered) { return prefix + "* " + rendered; })
            .join("\n");
    };
    MarkdownRenderer.prototype.renderContribution = function (commit) {
        var issue = commit.githubIssue;
        if (issue) {
            var markdown = "";
            if (issue.number && issue.pull_request && issue.pull_request.html_url) {
                var prUrl = issue.pull_request.html_url;
                markdown += "[#" + issue.number + "](" + prUrl + ") ";
            }
            if (issue.title && issue.title.match(COMMIT_FIX_REGEX)) {
                issue.title = issue.title.replace(COMMIT_FIX_REGEX, "Closes [#$3](" + this.options.baseIssueUrl + "$3)");
            }
            markdown += issue.title + " ([@" + issue.user.login + "](" + issue.user.html_url + "))";
            return markdown;
        }
    };
    MarkdownRenderer.prototype.renderContributorList = function (contributors) {
        var _this = this;
        var renderedContributors = contributors.map(function (contributor) { return "- " + _this.renderContributor(contributor); }).sort();
        return "#### Committers: " + contributors.length + "\n" + renderedContributors.join("\n");
    };
    MarkdownRenderer.prototype.renderContributor = function (contributor) {
        var userNameAndLink = "[@" + contributor.login + "](" + contributor.html_url + ")";
        if (contributor.name) {
            return contributor.name + " (" + userNameAndLink + ")";
        }
        else {
            return userNameAndLink;
        }
    };
    MarkdownRenderer.prototype.hasPackages = function (commits) {
        return commits.some(function (commit) { return commit.packages !== undefined && commit.packages.length > 0; });
    };
    MarkdownRenderer.prototype.groupByCategory = function (allCommits) {
        return this.options.categories.map(function (name) {
            var commits = allCommits.filter(function (commit) { return commit.categories && commit.categories.indexOf(name) !== -1; });
            return { name: name, commits: commits };
        });
    };
    return MarkdownRenderer;
}());
exports.default = MarkdownRenderer;

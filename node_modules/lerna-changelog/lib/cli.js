"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var chalk_1 = require("chalk");
var cli_highlight_1 = require("cli-highlight");
var changelog_1 = require("./changelog");
var configuration_1 = require("./configuration");
var configuration_error_1 = require("./configuration-error");
function run() {
    return __awaiter(this, void 0, void 0, function () {
        var yargs, argv, options, config, result, highlighted, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    yargs = require("yargs");
                    argv = yargs
                        .usage("lerna-changelog [options]")
                        .options({
                        from: {
                            type: "string",
                            desc: "A git tag or commit hash that determines the lower bound of the range of commits",
                            defaultDescription: "latest tagged commit",
                        },
                        to: {
                            type: "string",
                            desc: "A git tag or commit hash that determines the upper bound of the range of commits",
                        },
                        "tag-from": {
                            hidden: true,
                            type: "string",
                            desc: "A git tag that determines the lower bound of the range of commits (defaults to last available)",
                        },
                        "tag-to": {
                            hidden: true,
                            type: "string",
                            desc: "A git tag that determines the upper bound of the range of commits",
                        },
                        "next-version": {
                            type: "string",
                            desc: "The name of the next version",
                            default: "Unreleased",
                        },
                        "next-version-from-metadata": {
                            type: "boolean",
                            desc: "Infer the name of the next version from package metadata",
                            default: false,
                        },
                    })
                        .example("lerna-changelog", 'create a changelog for the changes after the latest available tag, under "Unreleased" section')
                        .example("lerna-changelog --from=0.1.0 --to=0.3.0", "create a changelog for the changes in all tags within the given range")
                        .epilog("For more information, see https://github.com/lerna/lerna-changelog")
                        .wrap(Math.min(100, yargs.terminalWidth()))
                        .parse();
                    options = {
                        tagFrom: argv["from"] || argv["tag-from"],
                        tagTo: argv["to"] || argv["tag-to"],
                    };
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    config = configuration_1.load({
                        nextVersionFromMetadata: argv["next-version-from-metadata"],
                    });
                    if (argv["next-version"]) {
                        config.nextVersion = argv["next-version"];
                    }
                    return [4, new changelog_1.default(config).createMarkdown(options)];
                case 2:
                    result = _a.sent();
                    highlighted = cli_highlight_1.highlight(result, {
                        language: "Markdown",
                        theme: {
                            section: chalk_1.default.bold,
                            string: chalk_1.default.hex("#0366d6"),
                            link: chalk_1.default.dim,
                        },
                    });
                    console.log(highlighted);
                    return [3, 4];
                case 3:
                    e_1 = _a.sent();
                    if (e_1 instanceof configuration_error_1.default) {
                        console.log(chalk_1.default.red(e_1.message));
                    }
                    else {
                        console.log(chalk_1.default.red(e_1.stack));
                    }
                    return [3, 4];
                case 4: return [2];
            }
        });
    });
}
exports.run = run;
